const handleFormSubmit = async (e) => {
    e.preventDefault();

    const updatedVeiculo = {
        mod_id: selectedVehicle.mod_id || veiculos.mod_id,
        veic_placa: selectedVehicle.veic_placa || veiculos.veic_placa,
        veic_ano: selectedVehicle.veic_ano || veiculos.veic_ano,
        veic_cor: selectedVehicle.veic_cor || veiculos.veic_cor,
        veic_combustivel: selectedVehicle.veic_combustivel || veiculos.veic_combustivel,
        veic_observ: selectedVehicle.veic_observ || veiculos.veic_observ,
    };

    // Se ehproprietario foi editado, converte para número. Caso contrário, mantém o valor original.
    let ehproprietario = selectedVehicle.ehproprietario !== undefined
        ? parseInt(selectedVehicle.ehproprietario, 10)
        : parseInt(veiculos.ehproprietario, 10);

    ehproprietario = !isNaN(ehproprietario) ? ehproprietario : 0;

    const updatedVeiculoUsuario = {
        veic_usu_id: selectedVehicle.veic_usu_id || veiculos.veic_usu_id,
        data_inicial: selectedVehicle.data_inicial || veiculos.data_inicial,
        data_final: selectedVehicle.data_final || veiculos.data_final,
        ehproprietario // valor atualizado ou mantido
    };

    try {
        // Realiza as requisições PATCH para atualizar veículo e dados do usuário
        const [responseVehicle, responseVehicleUser] = await Promise.all([
            api.patch(`/veiculos/usuario/${selectedVehicle.veic_id}`, updatedVeiculo),
            api.patch(`/veiculoUsuario/${selectedVehicle.veic_usu_id}`, updatedVeiculoUsuario)
        ]);

        // Verifica se ambas as requisições foram bem-sucedidas
        if (responseVehicle.data.sucesso && responseVehicleUser.data.sucesso) {
            ListarVeiculosUsuario();

            Swal.fire({
                title: 'Sucesso!',
                text: 'O veículo e os dados do usuário foram atualizados com sucesso.',
                icon: 'success',
                confirmButtonText: 'OK',
                iconColor: "rgb(40, 167, 69)",
                confirmButtonColor: "rgb(40, 167, 69)",
            });
        } else {
            // Coleta mensagens de erro de cada requisição, se houver
            let errorMessage = '';

            if (!responseVehicle.data.sucesso) {
                errorMessage += `Erro ao atualizar veículo: ${responseVehicle.data.mensagem}\n`;
            }

            if (!responseVehicleUser.data.sucesso) {
                errorMessage += `Erro ao atualizar dados do veículo para o usuário: ${responseVehicleUser.data.mensagem}`;
            }

            Swal.fire({
                title: 'Erro!',
                text: errorMessage || 'Ocorreu um erro ao atualizar as informações.',
                icon: 'error',
                confirmButtonText: 'Ok',
                iconColor: '#d33',
                confirmButtonColor: '#d33',
            });
        }
    } catch (error) {
        Swal.fire({
            title: 'Erro!',
            text: `Erro na requisição: ${error.message}`,
            icon: 'error',
            confirmButtonText: 'Ok',
            iconColor: '#d33',
            confirmButtonColor: '#d33',
        });
    }
    setShowForm(false); // Fecha o formulário após submissão
};
