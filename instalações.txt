// INSTALAR AGENDA
    npm install fullcalendar

// INSTALAR PLUGIN's' AGENDA
    npm install --save @fullcalendar/core @fullcalendar/daygrid @fullcalendar/interaction

// INSTALAR BIBLIOTECA SWEETALERT2
    npm install sweetalert2

// CARROSSEL 
npm install react-responsive-carousel

// validar cpf
npm i cpf-cnpj-validator




async editarUsuarios(request, response) {
        try {
            const {
                usu_nome,
                usu_cpf,
                usu_data_nasc,
                usu_sexo,
                usu_telefone,
                usu_email,
                usu_observ,
                usu_acesso,
                usu_senha,
                usu_situacao
            } = request.body;

            const { usu_id } = request.params;

            if (!usu_nome || !usu_cpf || !usu_data_nasc || usu_sexo === undefined || !usu_telefone || !usu_email || !usu_senha) {
                return response.status(400).json({
                    sucesso: false,
                    mensagem: 'Campos obrigatórios não preenchidos.',
                });
            }

            const sqlVerificaCpf = `
                SELECT usu_id
                  FROM usuarios
                 WHERE usu_cpf = ? AND usu_id != ?`;

            const [cpfExistente] = await db.query(sqlVerificaCpf, [usu_cpf, usu_id]);

            if (cpfExistente.length > 0) {
                return response.status(400).json({
                    sucesso: false,
                    mensagem: 'CPF já cadastrado por outro usuário.',
                });
            }

            const sqlVerificaEmail = `SELECT usu_id FROM usuarios WHERE usu_email = ? AND usu_id != ?`;
            const [emailExistente] = await db.query(sqlVerificaEmail, [usu_email, usu_id]);

            if (emailExistente.length > 0) {
                return response.status(400).json({
                    sucesso: false,
                    mensagem: 'Email já cadastrado por outro usuário.',
                });
            }

            const sql = `
                UPDATE usuarios 
                   SET usu_nome = ?, 
                       usu_cpf = ?, 
                       usu_data_nasc = ?, 
                       usu_sexo = ?, 
                       usu_telefone = ?, 
                       usu_email = ?, 
                       usu_observ = ?, 
                       usu_acesso = ?,
                       usu_senha = ?,
                       usu_situacao = ?                
                 WHERE usu_id = ?;`;

            const values = [
                usu_nome,
                usu_cpf,
                dataInput(usu_data_nasc),
                usu_sexo,
                usu_telefone,
                usu_email,
                usu_observ || null,
                usu_acesso,
                usu_senha,
                usu_situacao,
                usu_id
            ];

            const [atualizaDados] = await db.query(sql, values);

            return response.status(200).json({
                sucesso: true,
                mensagem: `Usuário ${usu_id} atualizado com sucesso!`,
                dados: atualizaDados.affectedRows
            });
        } catch (error) {
            console.error('Erro em editarUsuarios:', error);
            return response.status(500).json({
                sucesso: false,
                mensagem: 'Erro na requisição.',
                dados: error.message
            });
        }
    },